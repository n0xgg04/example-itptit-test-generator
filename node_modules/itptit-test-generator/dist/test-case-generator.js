"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const lodash_1 = __importDefault(require("lodash"));
const input_generator_1 = require("./input-generator");
const child_process_1 = require("child_process");
const file_exception_1 = require("./src/exceptions/file-exception");
const logger_1 = __importDefault(require("./src/utils/logger"));
async function createTestCase({ baseDir, solutionPath, inputDir, outputDir, amount, template, inputFilenameTemplate = "input$i.txt", outputFilenameTemplate = "output$i.txt", timeout = 15000 }) {
    console.clear();
    logger_1.default.clear();
    logger_1.default.info("Test case generator from @n0xgg04");
    const basePath = baseDir || process.cwd();
    const solutionRealPath = path_1.default.join(basePath, solutionPath);
    const solutionFileName = path_1.default.basename(solutionPath);
    const inputRealPath = path_1.default.join(basePath, inputDir);
    const outputRealPath = path_1.default.join(basePath, outputDir);
    const cacheRealPath = path_1.default.join(basePath, "cache");
    const solutionBaseName = solutionFileName.split(".")[0];
    const solutionExt = solutionFileName.split(".")[1];
    const solutionExcFile = path_1.default.join(cacheRealPath, solutionBaseName);
    if (!fs_1.default.existsSync(solutionRealPath))
        throw new file_exception_1.SolutionNotFoundException(solutionRealPath);
    else {
        logger_1.default.info("[Solution File] OK!");
    }
    if (!fs_1.default.existsSync(cacheRealPath))
        fs_1.default.mkdirSync(cacheRealPath, {
            recursive: true
        });
    if (fs_1.default.existsSync(inputRealPath)) {
    }
    else {
        fs_1.default.mkdirSync(inputRealPath, {
            recursive: true
        });
        logger_1.default.info("[Input] Created input folder !");
    }
    if (fs_1.default.existsSync(outputRealPath)) {
    }
    else {
        fs_1.default.mkdirSync(outputRealPath, {
            recursive: true
        });
        logger_1.default.info("[Output] Created output folder !");
    }
    logger_1.default.info("Compiling solution...");
    (0, child_process_1.exec)(`g++ -o '${solutionExcFile}' '${solutionRealPath}'`, {
        timeout
    }, (error, stdout, stderr) => {
        if (!error) {
            logger_1.default.info("Compiled solution file.");
            logger_1.default.info("Generating...");
            lodash_1.default.times(amount).map((i) => {
                const inputPath = path_1.default.join(inputRealPath, inputFilenameTemplate?.replaceAll("$i", `${i + 1}`));
                const outputPath = path_1.default.join(outputRealPath, outputFilenameTemplate?.replaceAll("$i", `${i + 1}`));
                const input = (0, input_generator_1.generate)(template);
                fs_1.default.writeFileSync(inputPath, input);
                (0, child_process_1.exec)(`'${solutionExcFile}' < '${path_1.default.join(inputRealPath, inputFilenameTemplate?.replaceAll("$i", `${i + 1}`))}'`, {
                    timeout
                }, (error, stdout) => {
                    if (!error) {
                        fs_1.default.writeFileSync(outputPath, stdout);
                        console.log(`Generated test case ${i + 1}`);
                    }
                    else {
                        console.log(error);
                    }
                });
            });
        }
        else {
            console.log(error);
        }
    });
}
exports.default = createTestCase;
