import Effect from "../enums/effect";
import { generate } from "../generators/input-generator";
/**
 * Generate a sub test-case template
 * @param testCase - Test Case class template
 * @constructor
 */
export function UseSubGeneration(testCase) {
    return function (target, propertyKey, descriptor) {
        const objEffect = Reflect.hasMetadata("effect", target)
            ? Reflect.getMetadata("effect", target)
            : [];
        if (!objEffect.includes(propertyKey.toString())) {
            Reflect.defineMetadata("effect", [...objEffect, propertyKey.toString()], target);
        }
        const metadataKey = `effect:${propertyKey.toString()}`;
        const effectList = Reflect.hasMetadata(metadataKey, target)
            ? Reflect.getMetadata(metadataKey, target)
            : [];
        Reflect.defineMetadata(metadataKey, [...effectList, Effect.UseSubGeneration], target);
        Reflect.defineMetadata(`${metadataKey}:use_sub_generation`, testCase, target);
        descriptor.value = () => {
            return generate(testCase);
        };
    };
}
